version: '3.8'

networks:
  default:
    external: true
    name: dev-local

volumes:
  zk: {}
  zk_log: {}
  bk1: {}
  bk2: {}
  bk3: {}
  c1_kafka_data: {}
  c1_kafka_secrets: {}
  cache: {}

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${VERSION}
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - '2181:2181'
    healthcheck:
      test: echo ruok | nc -w 2 localhost 2181 | grep imok
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok,stat"
    volumes:
      - zk:/var/lib/zookeeper/data
      - zk_log:/var/lib/zookeeper/log
      - ./secrets:/etc/zookeeper/secrets

  broker-1:
    image: confluentinc/cp-kafka:${VERSION}
    hostname: broker-1
    container_name: broker-1
    stop_grace_period: 120s
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '19092:19092'
      - '17071:7071'
    volumes:
      - bk1:/var/lib/kafka/data
      - ./jmx_prometheus:/opt/jmx_prometheus
      - ./secrets:/etc/kafka/secrets
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_SECURITY_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # LB is an optional listener that is fronted by an nginx loadbalancer allowing for testing cluster with artificial network latency.
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,LB:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1:9092,PLAINTEXT_HOST://localhost:19092,LB://broker-1-lb:9094
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 4
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_METRIC_REPORTERS: ' '
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml -javaagent:/opt/jmx_prometheus/jolokia-agent.jar=port=7072,host=*
      CONFLUENT_METRICS_ENABLE: 'false'


  broker-2:
    image: confluentinc/cp-kafka:${VERSION}
    hostname: broker-2
    container_name: broker-2
    stop_grace_period: 120s
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '29092:29092'
    volumes:
      - bk2:/var/lib/kafka/data
      - ./jmx_prometheus:/opt/jmx_prometheus
      - ./secrets:/etc/kafka/secrets
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_SECURITY_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,LB:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-2:9092,PLAINTEXT_HOST://localhost:29092,LB://broker-2-lb:9094
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 4
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_METRIC_REPORTERS: ' '
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml -javaagent:/opt/jmx_prometheus/jolokia-agent.jar=port=7072,host=*
      CONFLUENT_METRICS_ENABLE: 'false'

  broker-3:
    image: confluentinc/cp-kafka:${VERSION}
    hostname: broker-3
    container_name: broker-3
    stop_grace_period: 120s
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '39092:39092'
    volumes:
      - bk3:/var/lib/kafka/data
      - ./jmx_prometheus:/opt/jmx_prometheus
      - ./secrets:/etc/kafka/secrets
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_SECURITY_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,LB:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-3:9092,PLAINTEXT_HOST://localhost:39092,LB://broker-3-lb:9094
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 4
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_METRIC_REPORTERS: ' '
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml -javaagent:/opt/jmx_prometheus/jolokia-agent.jar=port=7072,host=*
      CONFLUENT_METRICS_ENABLE: 'false'

  schema-registry:
    image: confluentinc/cp-schema-registry:${VERSION}
    hostname: schema-registry
    container_name: schema-registry
    stop_grace_period: 120s
    healthcheck:
      test: curl --fail http://localhost:8081/ || exit 1
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      broker-1:
        condition: service_healthy
      broker-2:
        condition: service_healthy
      broker-3:
        condition: service_healthy
    ports:
      - '8081:8081'
    volumes:
      - ./jmx_prometheus:/opt/jmx_prometheus
      - ./secrets:/etc/schema-registry/secrets
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker-1:9092,broker-2:9092,broker-3:9092
      KAFKA_METRIC_REPORTERS: ' '
      CONFLUENT_METRICS_ENABLE: 'false'
      EXTRA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/sr-config.yml
      SCHEMA_REGISTRY_OPTS  : -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/sr-config.yml

  connect-1:
    image: confluentinc/cp-kafka-connect:${VERSION}
    hostname: connect-1
    container_name: connect-1
    ports:
      - "18083:8083"
      - "17072:7071"
    healthcheck:
      test: curl --fail http://localhost:8083/connector-plugins || exit 1
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 15s
    depends_on:
      broker-1:
        condition: service_healthy
      broker-2:
        condition: service_healthy
      broker-3:
        condition: service_healthy
    volumes:
      - c1_kafka_data:/var/lib/kafka/data
      - c1_kafka_secrets:/etc/kafka/secrets
      - ./jmx_prometheus:/opt/jmx_prometheus
      - ./jars:/etc/kafka-connect/jars
      - ./data:/data
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker-1:9092,broker-2:9092,broker-3:9092'
      CONNECT_CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: All
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: 'connect-cluster'
      CONNECT_CONFIG_STORAGE_TOPIC: 'connect-cluster-config'
      CONNECT_OFFSET_STORAGE_TOPIC: 'connect-cluster-offsets'
      CONNECT_STATUS_STORAGE_TOPIC: 'connect-cluster-status'
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_CONFIG_PROVIDERS: file
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: 'org.apache.kafka.common.config.provider.FileConfigProvider'
      CONNECT_KEY_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_VALUE_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_REST_ADVERTISED_HOST_NAME: 'connect-1'
      CONNECT_PLUGIN_PATH: /etc/kafka-connect/jars
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/connect-config.yml

  kpow:
    image: factorhouse/kpow-ce
    container_name: kpow
    hostname: kpow
    ports:
      - "3000:3000"
    environment:
      BOOTSTRAP: broker-1:9092,broker-2:9092,broker-3:9092
      CONNECT_REST_URL: http://connect-1:8083
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
#      SCHEMA_REGISTRY_AUTH=USER_INFO
#      SCHEMA_REGISTRY_USER=admin
#      SCHEMA_REGISTRY_PASSWORD=admin
    depends_on:
      broker-1:
        condition: service_healthy
      broker-2:
        condition: service_healthy
      broker-3:
        condition: service_healthy
      connect-1:
        condition: service_healthy